// Code generated by hero.
// source: http-file-upload-download/template/mushroom.html
// DO NOT EDIT!
package template

import (
	"bytes"
	"http-file-upload-download/internal"

	"github.com/shiyanhui/hero"
)

func PageMushroom(fsItems []internal.FSItem, buffer *bytes.Buffer) {
	buffer.WriteString(`<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <title></title>
    <link rel="shortcut icon" href="/asset/favicon.ico">
<!-- <link rel="shortcut icon" type="image/x-icon" href="/asset/favicon.ico"> -->
<!-- <link rel="shortcut icon" type="image/vnd.microsoft.icon" href="/asset/favicon.ico"> -->
    <link rel="mask-icon" color="black" href="/asset/miao.svg">
    <link rel="apple-touch-icon" href="/asset/miao.png">
    <link rel="Bookmark" href="/asset/miao.png" />

    <script src="/asset/vue.min.js"></script>
    <link rel="stylesheet" href="/asset/element-ui/lib/theme-chalk/index.css">
    <script src="/asset/element-ui/lib/index.js"></script>
</head>
<body>
`)

	activeIndex := 1

	buffer.WriteString(`<div id="mushroom-nav">
    <el-menu :default-active="activeIndex" class="el-menu-demo" mode="horizontal" @select="handleSelect">
        <el-menu-item index="1"><i class="el-icon-document"></i></el-menu-item>
        <el-menu-item index="2"><i class="el-icon-document-add"></i></el-menu-item>
        <el-menu-item index="3"><i class="el-icon-edit-outline"></i></el-menu-item>
        <el-menu-item index="4" disabled><i class="el-icon-picture-outline"></i></el-menu-item>
    </el-menu>
</div>

<script>
    "use strict";
    let urlMap = {};
    urlMap['1'] = '/mushroom/';
    urlMap['2'] = '/up';
    urlMap['3'] = '/text';

    let extData = {
        data() {
            return {
                activeIndex: '`)
	hero.FormatInt(int64(activeIndex), buffer)
	buffer.WriteString(`',
            };
        },
        methods: {
            handleSelect(key, keyPath) {
                console.log(key, keyPath);
                if (urlMap.hasOwnProperty(key)) {
                    console.log(urlMap[key]);
                    window.location.href = urlMap[key];
                }
            }
        }
    };
    let navMenuCtor = Vue.extend(extData);
    new navMenuCtor().$mount('#mushroom-nav');
</script>`)
	buffer.WriteString(`<div id="mushroom-fs">
    <el-table
            :data="fsItems"
            stripe
            empty-text="æ­¤æ–‡ä»¶å¤¹æ— æ–‡ä»¶"
            style="width: 100%">
        <el-table-column
                prop="name">
        </el-table-column>
        <el-table-column
                width="76"
                prop="size">
        </el-table-column>
        <el-table-column
                width="124">
            <template slot-scope="scope">
                <el-button icon="el-icon-folder-opened" @click="handleClick(scope.row)" :disabled="!scope.row.isDir" circle></el-button>
                <el-button icon="el-icon-download" @click="handleClick(scope.row)" :disabled="scope.row.isDir" circle></el-button>
            </template>
        </el-table-column>
    </el-table>
</div>

<script>
    "use strict";
    let fsExtData = {
        methods: {
            handleClick(row) {
                if (row.isDir) {
                    let dirURL = location.href;
                    if (location.href.endsWith("/")) {
                        dirURL += row.name;
                    } else {
                        dirURL += "/" + row.name;
                    }
                    location.assign(dirURL);
                } else {
                    let dlURL = location.origin + "/download/" + row.filename;
                    let request = new XMLHttpRequest();
                    request.open("GET", dlURL);
                    request.send();
                    location.assign(dlURL);
                }
            }
        },
        data() {
            return {
                fsItems: [
                    `)
	for _, v := range fsItems {
		buffer.WriteString(`
                    {
                        name: '`)
		buffer.WriteString(v.Name)
		buffer.WriteString(`',
                        isDir: `)
		hero.FormatBool(v.IsDir, buffer)
		buffer.WriteString(`,
                        filename: '`)
		buffer.WriteString(v.Filename)
		buffer.WriteString(`',
                        size: '`)
		buffer.WriteString(v.Size)
		buffer.WriteString(`',
                    },
                    `)
	}
	buffer.WriteString(`
                ]
            }
        }
    };
    let fsCtor = Vue.extend(fsExtData);
    new fsCtor().$mount('#mushroom-fs');
    document.getElementsByTagName("title")[0].innerText = "ðŸ“„";
</script>`)
	buffer.WriteString(`</body>
</html>`)

}
